t.test(change.ww~treatment,data=c[which(c$treatment=="control.day"&c$treatment=="day"),]) #ANOVA
t.test(c[which(c$treatment=="control.day"&c$treatment=="day"),c(5,8)])
c[which(c$treatment=="control.day"&c$treatment=="day"),c(5,8)]
d<-c[which(c$treatment=="control.day"|c$treatment=="day"),c(5,8)]
d
t.test(d)
t.test(d, type=2)
a<-aov(change.ww~treatment,data=c) #ANOVA
summary(a)
TukeyHSD(a) #posthoc test
c<-read.csv("/Users/helenyan/Desktop/School/USRA Summer 2016/Mithrax Project/mithrax.lab.csv")
c.day<-c[which(c$treatment=="day"),]
c.night<-c[which(c$treatment=="night"),]
control.day<-c[which(c$treatment=="control.day"),]
control.night<-c[which(c$treatment=="control.night"),]
c.day.d<-c(c.day$change.ww)
c.night.d<-c(c.night$change.ww)
control.day.d<-c(control.day$change.ww)
control.night.d<-c(control.night$change.ww)
c.means<-c(mean(c.day$change.ww), mean(c.night$change.ww), mean(control.night$change.ww), mean(control.day$change.ww))
matrix(c(sd(c.day.d),sd(c.night.d),sd(control.day.d),sd(control.night.d)))
c.plot<-barplot(c.means, ylim=c(-1,10))
segments(c.plot, c.means-stDevs, c.plot, c.means+stDevs)
segments(c.plot-0.1, c.means-stDevs, c.plot+0.1, c.means-stDevs)
segments(c.plot-0.1, c.means+stDevs, c.plot+0.1, c.means+stDevs)
c
c.day<-c[which(c$treatment=="day"),]
c.night<-c[which(c$treatment=="night"),]
control.day<-c[which(c$treatment=="control.day"),]
control.night<-c[which(c$treatment=="control.night"),]
c.day.d<-c(c.day$change.ww)
c.night.d<-c(c.night$change.ww)
control.day.d<-c(control.day$change.ww)
control.night.d<-c(control.night$change.ww)
c.means<-c(mean(c.day$change.ww), mean(c.night$change.ww), mean(control.night$change.ww), mean(control.day$change.ww))
matrix(c(sd(c.day.d),sd(c.night.d),sd(control.day.d),sd(control.night.d)))
stDevs
c.plot<-barplot(c.means, ylim=c(-1,10))
c.plot<-barplot(c.means, ylim=c(-1,10), xlab="Day, Night, Control Day, Control Night", ylab="Mean Change in Wet Weight(g)")
segments(c.plot, c.means-stDevs, c.plot, c.means+stDevs)
segments(c.plot-0.1, c.means-stDevs, c.plot+0.1, c.means-stDevs)
segments(c.plot-0.1, c.means+stDevs, c.plot+0.1, c.means+stDevs)
c.plot<-barplot(c.means, ylim=c(-1,10), xlab="Day, Night, Control Day, Control Night", ylab="Mean Change in Wet Weight(g)", col=c("blue","red"))
c.plot<-barplot(c.means, ylim=c(-1,10), xlab="Day, Night, Control Day, Control Night", ylab="Mean Change in Wet Weight(g)", col=c("blue","purple","pink"))
segments(c.plot, c.means-stDevs, c.plot, c.means+stDevs)
segments(c.plot-0.1, c.means-stDevs, c.plot+0.1, c.means-stDevs)
segments(c.plot-0.1, c.means+stDevs, c.plot+0.1, c.means+stDevs)
a<-aov(change.ww~treatment,data=c) #ANOVA
summary(a)
TukeyHSD(a) #posthoc test
c<-read.csv("/users/helenyan/desktop/school/usra summer 2016/mithrax project/fish_counts.csv")
c
cf<-c[which(c$species=="mithrax")]
cf<-c[which(c$species=="mithrax"),]
summary(cf)
cf.day<-cf[which(cf$day/night=="day")]
c<-read.csv("/users/helenyan/desktop/school/usra summer 2016/mithrax project/fish_counts.csv")
cf<-c[which(c$species=="mithrax"),]
cf.day<-cf[which(cf$day.night=="day")]
cf.day<-cf[which(cf$day.night=="day"),]
plot(cf.day$activity.level, cf.day$hiding.score)
summary(cf)
c<-read.csv("/users/helenyan/desktop/school/usra summer 2016/mithrax project/fish_counts.csv")
cf<-c[which(c$species=="mithrax"),]
summary(cf)
cf
plot(cf$day.night,cf$activity.level)
c<-read.csv("/users/helenyan/desktop/school/usra summer 2016/mithrax project/mithrax.field.data.csv")
ca<-c[which(c$activity.level=="active")]
ca<-c[which(c$activity.level=="active"),]
ci<-c[which(c$activity.level=="inactive"),]
ca
plot(ca$day.night,ca$hiding.score)
ch<-c[which(c$hiding.score=="1&2&3")]
ch<-c[which(c$hiding.score=="1&2&3"),]
ch
ch<-c[which(c$hiding.score=="1"&"2"&"3"),]
c
cn<-c[which(c$day.night=="night")]
cn<-c[which(c$day.night=="night"),]
plot(cn$activity.level, cn$lobophora)
cd<-c[which(c$day.night=="day"),]
cn<-c[which(c#day.night=="night"),]
cd
cn<-c[which(c$day.night=="night"),]
cd
cn
cd.d<-c(cd$activity.level)
cn.d<-c(cd$activity.level)
cd.d
cn.d<-c(cn$activity.level)
cn.d
c.means<-c(mean(cd$activity.level), mean(cn$activity.level))
c<-read.csv("/users/helenyan/desktop/school/usra summer 2016/mithrax project/mithrax.field.data.csv")
cu<-c[which(c$activity.level=="active",&"inactive"),]
cu<-c[which(c$activity.level=="active & inactive"),]
cu
c<-read.csv("/Users/helenyan/Desktop/School/USRA Summer 2016/Mithrax Project/mithrax.lab.csv")
c<-read.csv("/Users/helenyan/desktop/school/USRA summer 2016/mithrax project/mithrax.field.data.csv")
c
ca<-c[which(c$activity.level=="active"),]
ca
c<-read.csv("/Users/helenyan/desktop/school/USRA summer 2016/mithrax project/mithrax.field.data.csv")
c
ca<-c[which(c$activity.level=="active"),]
ca
plot(ca$algae.grazed)
c<-read.csv("/Users/helenyan/desktop/school/USRA summer 2016/mithrax project/mithrax.field.data.csv")
ca<-c[which(c$activity.level=="active"),]
plot(ca$algae.grazed)
c<-read.csv("/Users/helenyan/desktop/school/USRA summer 2016/mithrax project/mithrax.field.data.csv")
ca<-c[which(c$activity.level=="active"),]
plot(ca$algae.grazed)
cg<-c[which(c$algae.grazed=="lobophora"&"turf")]
cg<-c[which(c$algae.grazed=="lobophora"&"turf"),]
cg<-c[which(c$algae.grazed=="lobophora"&&"turf"),]
cg
cg<-c[which(c$algae.grazed==c("lobophora","turf")),]
cg
cg<-c[which(c$algae.grazed==c("lobophora","turf"),)]
cg<-c[which(c$algae.grazed==c("lobophora","turf")),]
cg
cg<-c[which(c$algae.grazed==c("lobophora" & "turf")),]
cg<-c[which(c$algae.grazed==c("lobophora","turf")),]
cg<-ca[which(ca$algae.grazed==c("lobophora","turf")),]
cg<-c[which(ca$algae.grazed==c("lobophora","turf")),]
cg<-c[which(c$algae.grazed==c("lobophora","turf")),]
cg
cg<-c[which(c$algae.grazed=="lobophora" & "turf"),]
cg<-c[which(c$algae.grazed=="lobophora" & turf),]
cg<-c[which(c$algae.grazed==c("lobophora","turf"),]
cg<-c[which(c$algae.grazed==c("lobophora","turf")),]
cg
c<-read.csv("/Users/helenyan/desktop/school/USRA summer 2016/mithrax project/mithrax.field.data.csv")
ca<-c[which(c$activity.level=="active"),]
cg<-c[which(c$algae.grazed==c("lobophora","turf")),]
cg
cg<-c[which(c$algae.grazed=="lobophora"&"turf"),]
cg<-c[which(c$algae.grazed=="lobophora" & "turf"),]
cg<-c[which(c$algae.grazed==c("lobophora","turf")),]
cg
c<-read.csv("/users/helenyan/desktop/school/usra summer 2016/mithrax project/mithrax.field.data.csv")
summary(c)
ca<-c[which(c$activity.level=="active"),]
ca
cg<-c[which(c$algae.grazed==c("lobophora","turf"))]
cg<-c[which(c$algae.grazed==c("lobophora","turf")),]
cg
crab<-read.csv("/Users/helenyan/desktop/school/directed studies 2016/lab.field.combined.csv")
summary(crab)
width<-crab[which(crab$$carapace.width.cm,)]
width<-crab[which(crab$carapace.width.cm,)]
width<-crab[which(crab$carapace.width.cm),]
plot(crab$carapace.width.cm)
crab<-read.csv("/Users/helenyan/desktop/school/directed studies 2016/lab.field.combined.csv")
summary(crab)
plot(crab&count~crab$carapace.width.cm)
crab<-read.csv("/Users/helenyan/desktop/school/directed studies 2016/lab.field.combined.csv")
summary(crab)
plot(crab&count~crab$carapace.width.cm)
plot(crab&count ~ crab$carapace.width.cm)
plot(crab$count ~ crab$carapace.width.cm)
plot(crab$count ~ crab$carapace.width.cm, ylab="Count", xlab="Carapace Width cm")
lab<-crab[which(crab$location=="lab")]
lab<-crab[which(crab$location=="lab"),]
plot(crab$count~lab$carapace.width.cm)
plot(lab$carapace.width.cm)
plot(crab$count ~ lab$carapace.width.cm)
plot(index ~ lab$carapace.width.cm)
plot(lab$carapace.width.cm)
barplot(crab$count~crab$carapace.width.cm)
barplot(crab$carapace.width.cm~crab$count)
plot(crab$count ~ crab$carapace.width.cm, ylab="Count", xlab="Carapace Width cm")
field<-crab[which(crab$location=="field")]
field<-crab[which(crab$location=="field"),]
plot(field$carapace.width.cm)
plot(crab$count~field$carapace.width.cm)
plot(field$carapace.width.cm)
plot(crab$count ~ crab$carapace.width.cm, ylab="Count", xlab="Carapace Width cm")
plot(crab$carapace.width.cm)
crab<-read.csv("/Users/helenyan/desktop/school/directed studies 2016/lab.field.combined.csv")
plot(crab$count ~ crab$carapace.width.cm, ylab="Count", xlab="Carapace Width cm")
crab<-read.csv("/Users/helenyan/desktop/school/directed studies 2016/lab.field.combined.csv")
summary(crab)
weight<-crab[which(crab$location=="lab")]
weight<-crab[which(crab$location=="lab"),]
summary(weight)
lab<-crab[which(crab$location=="lab"),]
summary(lab)
plot(lab$carapace.width.cm~lab$weight.g)
plot(lab$weight.g~lab$carapace.width.cm)
plot(lab$weight.g~lab$carapace.width.cm, ylab="Weight (g)")
plot(lab$weight.g~lab$carapace.width.cm, ylab="Weight (g)", xlab="Carapace Width (cm)")
plot(lab$weight.g~lab$carapace.width.cm, ylab="Weight (g)", xlab="Carapace Width (cm)", main="Lab Weight vs. Carapace Width")
summary(crab)
fish<-read.csv("/users/helenyan/desktop/school/directed studies 2016/fish.survey.csv")
summary(fish)
plot(fish$family~fish$total.weight.g)
plot(fish$total.weight.g~fish$family)
library(dplyr)
n_cores <- parallel::detectCores()
library(parallel)
library(doSNOW)
library(foreach)
library(dismo)
library(tidyverse)#
library(gbm)#
library(ROCR)#
library(ModelMetrics)
n_cores <- parallel::detectCores()
n_cores
rawSpp <- read_csv('../../../Datasets/ProcessedCovariates_190119.csv')
rawDD <- read_csv('../../../Datasets/ProcessedDataDeficients_190208.csv')
sppData <-#
  rawSpp %>%#
  # remove collinear covariates#
  dplyr::select(-X1, -logFishProd, -logIuu,#
                -logChondLand, -EPI, -ReefFishers, -logFinUSD) %>%#
  as.data.frame()
getwd()
setwd('/Desktop/School/DirectedStudies2018/R/Git/SawfishPrioritization/')
setwd('/users/helenyan/Desktop/School/DirectedStudies2018/R/Git/SawfishPrioritization/')
rawSpp <- read_csv('../../../Datasets/ProcessedCovariates_190119.csv')
rawDD <- read_csv('../../../Datasets/ProcessedDataDeficients_190208.csv')
sppData <-
rawSpp %>%#
  # remove collinear covariates#
  dplyr::select(-X1, -logFishProd, -logIuu,#
                -logChondLand, -EPI, -ReefFishers, -logFinUSD) %>%#
  as.data.frame()
preddata <- #
  rawDD %>% #
  dplyr::select(-X1) %>% #
  as.data.frame()
set.seed(123)
randomIndex <- sample(1:nrow(sppData), nrow(sppData))
sppData <- sppData[randomIndex, ]
n <- nrow(sppData)
ntrain <- round(0.8*n)
trainIndex <- sample(1:n, ntrain)
sppTrain_raw <- sppData[trainIndex, ]
sppTest_raw <- sppData[-trainIndex, ]
sppTrain <- #
  sppTrain_raw %>% #
  # need to reorder for analysis#
  .[, c(1, 7, 2:6, 8:21)] %>% #
  #mutate_at(c(8:21), list(~ scale(.))) %>% #
  as.data.frame()
sppTrain
names(sppTrai)
names(sppTrain)
sppTest <- #
  sppTest_raw %>% #
  # need to reorder for analysis#
  .[, c(1, 7, 2:6, 8:21)] %>% #
  #mutate_at(c(8:21), list(~ scale(.))) %>% #
  arrange(ISO3) %>% #
  as.data.frame()
cl <- makeCluster(3)
registerDoSNOW(cl)
clusterExport(cl, c('preddata', 'sppTrain', 'sppTest'), envir = environment())
clusterEvalQ(cl, c(library(gbm), library(dismo),#
                   library(tidyverse), library(ROCR),#
                   library(ModelMetrics)))
stopCluster(cl)
cl <- makeCluster(16)
registerDoSNOW(cl)
clusterExport(cl, c('preddata', 'sppTrain', 'sppTest'), envir = environment())
clusterEvalQ(cl, c(library(gbm), library(dismo),#
                   library(tidyverse), library(ROCR),#
                   library(ModelMetrics)))
cvresults <- expand.grid(run = seq(1:1000),#
                         cvauc = 0,#
                         cvdev = 0,#
                         cvcorr = 0,#
                         intnull = 0,#
                         #intdev = 0,#
                         evresdev = 0,#
                         #evnulldev = 0,#
                         #evdev = 0,#
                         evauc = 0)
RIresults <- list()
totalRI <- data.frame()
PredTest <- list()
totalTest <- data.frame()
Predresults <- list()
totalPred <- data.frame()
bootend <- 1000
foreach (i = 1:bootend) %dopar% {#
  # randomize the data #
  randomI <- sample(1 : nrow(sppTrain), nrow(sppTrain))#
  randomSpp <- sppTrain[randomI, ]#
  # run cv gbm#
  cvgbm <- #
    dismo::gbm.step(data = randomSpp,#
             gbm.x = 3:21,#
             gbm.y = 2, #
             family = 'bernoulli',#
             tree.complexity = 10,#
             learning.rate = 0.001,#
             bag.fragtion = 0.5,#
             n.folds = 10)#
  # extract model outputs#
  cvresults$cvauc[i] <- cvgbm$cv.statistics$discrimination.mean#
  cvresults$cvdev[i] <- cvgbm$cv.statistics$deviance.mean #
  cvresults$cvcorr[i] <- cvgbm$cv.statistics$correlation.mean#
  cvresults$intnull[i] <- cvgbm$self.statistics$mean.null#
  #cvresults$intdev[i] <- (cvresults$intnull - cvresults$cvdev)/cvresults$intnull#
  # model external metrics#
  pred <- predict.gbm(object = cvgbm, #
                      newdata = sppTest,#
                      n.trees = cvgbm$gbm.call$best.trees,#
                      type = 'response')#
  cvresults$evauc[i] <- gbm.roc.area(sppTest$occurrence, pred)#
  cvresults$evresdev[i] <- calc.deviance(sppTest$occurrence, pred, calc.mean = TRUE)#
  #cvresults$evnulldev[i] <- calc.deviance(sppTest$occurrence, #
   #                                       rep(mean(sppTest$occurrence),#
    #                                          nrow(sppTest)),#
     #                                     calc.mean = TRUE)#
  #cvresults$evdev[i] <- (cvresults$evnulldev - cvresults$evresdev)/cvresults$evnulldev #
  # record predicted values for test set#
  TestPred <- #
    sppTest %>% #
    dplyr::select(ISO3, occurrence) %>% #
    mutate(RunNo = paste(i)) %>% #
    mutate(PredValue = gbm::predict.gbm(object = cvgbm, #
                                   newdata = sppTest,#
                                   n.trees = cvgbm$gbm.call$best.trees,#
                                   type = 'response'))#
  PredTest[[i]] <- TestPred#
  # relative influence results#
  relinf <- cvgbm$contributions#
  relinf$run <- i#
  RIresults[[i]] <- relinf#
  # make predictions on data-deficient values#
  pred <- #
    rawDD %>% #
    dplyr::select(ISO3) %>% #
    mutate(Prediction = predict(object = cvgbm,#
                                newdata = preddata,#
                                n.trees = cvgbm$n.trees,#
                                type = 'response'),#
           RunNo = paste(i))#
  Predresults[[i]] <- pred#
  # bind all relative influences#
  ridf <- RIresults[[i]]#
  totalRI <- rbind(totalRI, ridf)#
  # bind all test predictions#
  testdf <- PredTest[[i]]#
  totalTest <- rbind(totalTest, testdf)#
  # bind all predictions #
  preddf <- Predresults[[i]]#
  totalPred <- rbind(totalPred, preddf)#
  FileNameRI <- #
    paste('../../../ModelOutputs/GBM/191011_CvGBMRelInf', i, '.csv', sep = '_')#
  FileNameTest <- #
    paste('../../../ModelOutputs/GBM/191011_CvGBMTestPred', i, '.csv', sep = '_')#
  FileNamePred <- #
    paste('../../../ModelOutputs/GBM/191011_CvGBMPred', i,  '.csv', sep = '_')#
  write.csv(totalRI, paste(FileNameRI))#
  write.csv(totalTest, paste(FileNameTest))#
  write.csv(totalPred, paste(FileNamePred))#
  if (i%%2 == 0) {#
    print(paste('Bootstrap ', i, ' done at ', Sys.time(), sep = ''))#
  }#
}
